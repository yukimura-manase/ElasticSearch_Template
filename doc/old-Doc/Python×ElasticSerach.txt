
< Python × ElasticSearchで全文検索アプリを作成する！ >

『Pythonで作るElasticSearchアプリケーション』を引用する！！

< 目次: 特に重要な項目を抜き出し >

    < ドキュメントの操作をハンズオンで学ぶ >

    < インデックスの操作をハンズオンで学ぶ >

    < マッピングの操作をハンズオンで学ぶ >

    < その他の主要な操作をハンズオンで学ぶ >

    < ElasticSearchによる様々な検索方法をハンズオンで学ぶ >

    < アグリゲーションを利用した統計データの作成方法をハンズオンで学ぶ >

    < Pythonによる検索アプリケーションの作成 >




< システム環境 >

Elasticsearch：7.2.1Python：3.7.3サンプルコード本書のサンプルコードは以下に公開しております。

https://github.com/chaingng/elasticsearch_python_tutorial

----------------------------------------------------------------------------------------------------------------------------------------


< ElasticSearchとは？ >

ElasticsearchとはElasticsearchは、公式サイトでは以下のように紹介されています。

Elasticsearchは、様々なユースケースを解決する分散型RESTful検索/分析エンジンです。

予期した結果や、そうでないものも検索できるようにデータを集めて格納するElasticStackのコア製品です。

Elasticsearchは高速で、かつNodeと呼ばれるサーバを増やすことでデータ量や書き込み速度を分散させることができ、さらにスケールさせることも可能です。

RESTfulと呼ばれる最も広く使われているWebサービスの設計原則に従って設計されているため、シンプルな扱いが可能です。

Elastic社が提供するElasticsearch、Kibana、Beats、Logstashの４つのコアソリューションをElasticStackと呼びます。

ElasticStackにより、あらゆるソースからあらゆる形式のデータを確実かつ安全に取得し、リアルタイムで検索、分析、視覚化を実現します。

このうち最もコアとなる製品がElasticsearchになります。

----------------------------------------------------------------------------------------------------------------------------------------

< ElasticsearchSecurityを設定する >

ElasticsearchSecurityを設定するElasticsearchバージョン6.8以降では、ElasticsearchSecurityと呼ばれるセキュリティ機能が無料で利用できるようになっております。

ElasticsearchSecurityを利用して、ElasticsearchおよびKibanaに接続する際はID/PWを求めるようにして、セキュアな状態にします。


config/elasticsearch.ymlを編集し、Elasticsearchの設定を変更します。

以下の一行を追加することで、今後Elasticsearchには認証なしでは接続できないようになりセキュアな状態になります。

xpack.security.enabled:true


----------------------------------------------------------------------------------------------------------------------------------------

< Elasticsearchの概念インデックス・ドキュメント・マッピング >

Elasticsearchは分散ドキュメントストアとも呼ばれ、保存されるデータの最小単位が「ドキュメント」になります。

「ドキュメント」は、「フィールド」と呼ばれる「複数の属性」を持っています。

「インデックス」は、「ドキュメントの集合」になります。

具体的な例を示すと、実際の１冊１冊の本のデータが「ドキュメント」と呼ばれる単位で保存されます。

１冊１冊の本は価格やタイトル、出版日といったフィールドを持ちます。

そして、ドキュメントはBookと呼ばれるインデックスに保存される、といった関係性になります。

----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントの操作をハンズオンで学ぶ >

次に、ドキュメントに対して一通りの操作を実際に行ってみます。

最初に、Elasticsearchは、RESTfulと呼ばれる最も広く使われているWebサービスの設計原則に従って設計されているとありました。

RESTfulな設計では、CRUDと呼ばれる操作が対応付けられます。

CRUDとは、Create,Read,Update,Deleteそれぞれの頭文字をとったもので、

今回の例であれば、以下を意味します。

    Create:新規ドキュメントの作成（データの新規作成）
    
    Read:ドキュメントの一覧表示、および各ドキュメントの詳細表示（データの読み取り）
    
    Update:ドキュメントの更新（データの更新）
    
    Delete:ドキュメントの削除（データの削除）
    
あるリソース（今回はドキュメント）を考えたときに、このCRUDを満たすことで一通りの機能を作成することができます。

それでは、このCRUDという観点で、Elasticsearchのドキュメントに関する一通りの操作を実践していきます。


----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントの作成 Ver.ID指定 >


新しくドキュメントを作成してみます。

1. ドキュメントの作成には、PUTメソッドで「/[インデックス名]/_doc/[ドキュメントID]」の形式でアクセスし、ドキュメントの中身をJSON形式で渡します。

「 ドキュメント作成の構文 Ver.ID指定 」

    PUT /インデックス名/_doc/ドキュメントID { JSONデータ }

    「メソッド名」と「アクセスパス(ルート)」の間には、半角スペースが入る！

今回はbookというインデックスを作成し、実際の本の内容をドキュメントとしてJSON形式で渡します。

具体的には、以下のように記載します。

< Requestデータ >

    PUT /book/_doc/1
    {
        "title":"ビジネスPython超入門",
        "author":"中島省吾",
        "publisherName":"日経BP",
        "salesDate":"2019年06月07日",
        "itemPrice":2592
    }

再生ボタンを押すと、上記のコマンドが実行されドキュメントが作成されました。

具体的には以下のレスポンスが返ってきて、実際にドキュメントが作成されたことがわかります。

< Responseデータ >

    {
    "_index" : "book",
    "_type" : "_doc",
    "_id" : "1",
    "_version" : 1,
    "result" : "created",
    "_shards" : {
        "total" : 2,
        "successful" : 1,
        "failed" : 0
    },
    "_seq_no" : 0,
    "_primary_term" : 1
    }


各項目の意味は以下のようになります。

< 項目説明 >

_index => インデックス名

_type => タイプ名

    Elasticsearchバージョン7以降では常に_docとなります。

_id => ドキュメントの一意の識別子。
    
    ここではPUTで指定したid番号になります。

_version => 指定のドキュメントが更新された回数になります。

    作成も更新に含まれるので今回は1となります。

result => 操作結果になります。

    ドキュメントが作成されたのでここでは“created”が返ってきています。
    
_shards => 「検索されたシャードの数」と「検索に成功/失敗したシャードの数」を示しています。

_seq_no => インデックス作成操作のためにドキュメントに割り当てられる値になります。

_primary_term => インデックス作成操作のためにドキュメントに割り当てられます。

    _seq_no とこの _primary_term を用いることで、同時変更に対する制御を行うことができ、

    ドキュメントを取得してから他の変更が加えられていない場合にのみドキュメントを変更することができます。


----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントIDを指定せずにドキュメントを作成  >

先ほどはドキュメントIDに1を指定しましたが、IDを指定せずにドキュメントを作成することも可能です。

IDを指定せずにドキュメントを作成するには、以下のように

/[インデックス名]/_docに対してPOSTメソッドでリクエストを行います。

ドキュメント作成の構文 Ver.ID・自動生成

POST /インデックス名/_doc { JSONデータ }


< Requestデータ >

    POST /book/_doc
    {
        "title":"新・明解Python入門",
        "author":"柴田望洋",
        "publisherName":"SBクリエイティブ",
        "salesDate":"2019年05月24日",
        "itemPrice":2808
    }

< Responseデータ >

    {
    "_index" : "book",
    "_type" : "_doc",
    "_id" : "Nfdz534Bqckmlm-5y0PG",
    "_version" : 1,
    "result" : "created",
    "_shards" : {
        "total" : 2,
        "successful" : 1,
        "failed" : 0
    },
    "_seq_no" : 1,
    "_primary_term" : 1
    }


この際、自動的にドキュメントIDが割り当てられます。

ここではIDにtdFeQ24BceeHfn_8wqDOが割り当てられていることがわかります。


----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントの取得 >

ドキュメントを取得するには、/[インデックス名]/_doc/[ドキュメントID]に対してGETメソッドでリクエストします。


GET /インデックス名/_doc/ドキュメントID

< Requestデータ >

    GET /book/_doc/1

< Responseデータ >

    {
        "_index" : "book",
        "_type" : "_doc",
        "_id" : "1",
        "_version" : 1,
        "_seq_no" : 0,
        "_primary_term" : 1,
        "found" : true,
        "_source" : {
            "title" : "ビジネスPython超入門",
            "author" : "中島省吾",
            "publisherName" : "日経BP",
            "salesDate" : "2019年06月07日",
            "itemPrice" : 2592
        }
    }


ドキュメントの内容は、_sourceの中に含まれます。

また、リクエストしたドキュメントが見つかった場合はfoundの値がtrueとなり、ドキュメントが正しく取得できたことがわかります。

----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントを更新 >

すでに作成したドキュメントを更新したい場合は、/[インデックス名]/_update/[ドキュメントID]に対してPOSTメソッドでリクエストします。

リクエストBodyには、更新したい内容のみJSONドキュメントで渡します。具体的には、以下の形式で渡します。


    {
        "doc":{
            "[更新したいフィールド名]":[更新したいフィールドの値]
        }
    }

    ドキュメントの更新(update)

    POST /インデックス名/_update/ドキュメントID { "doc": { "[更新したいフィールド名]":[更新したいフィールドの値] } }

今回は以下のようにリクエストします。

< Requestデータ >

    POST /book/_update/1
    {
        "doc":{
            "itemPrice":1212
        }
    }

< Responseデータ >

    {
    "_index" : "book",
    "_type" : "_doc",
    "_id" : "1",
    "_version" : 3,
    "result" : "updated",
    "_shards" : {
        "total" : 2,
        "successful" : 1,
        "failed" : 0
    },
    "_seq_no" : 3,
    "_primary_term" : 1
    }


_versionが2となっており、このドキュメントに対して作成と更新の計2回操作が行われたことがわかります。

また、更新されたときはresultの値がupdatedとなります。

GET /book/_doc/1

{
  "_index" : "book",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 2,
  "_seq_no" : 2,
  "_primary_term" : 1,
  "found" : true,
  "_source" : {
    "title" : "ビジネスPython超入門",
    "author" : "中島省吾",
    "publisherName" : "日経BP",
    "salesDate" : "2019年06月07日",
    "itemPrice" : 1200
  }
}


----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントを削除 >

ドキュメントを削除するには、/[インデックス名]/_doc/[ドキュメントID]に対して、DELETEメソッドでリクエストします。

ドキュメントの削除

DELETE /インデックス名/_doc/ドキュメントID

DELETE /book/_doc/1 のレスポンスは以下のようになります。

{
  "_index" : "book",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 4,
  "result" : "deleted",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 4,
  "_primary_term" : 1
}


この際resultがdeletedとなり、ドキュメントが削除されたことがわかります。念のためドキュメントを取得してみて、削除されているか確認します。


GET /book/_doc/1

{
  "_index" : "book",
  "_type" : "_doc",
  "_id" : "1",
  "found" : false
}


foundがfalseになっており、ドキュメントが削除されたことが確認できました。


----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメント操作まとめ >

ドキュメントの操作まとめここまでで、ドキュメントに対して作成・取得・更新・削除の一通りの操作を学ぶことができました。以下、まとめておきます。


新規ドキュメントの作成

    PUT/[インデックス名]/_doc/[ドキュメントID]

新規ドキュメントの作成(Ver.自動採番)

    POST/[インデックス名]/_doc

ドキュメントを取得

    GET/[インデックス名]/_doc/[ドキュメントID]

ドキュメントの更新

    POST/[インデックス名]/_update/[ドキュメントID]

ドキュメントの削除

    DELETE/[インデックス名]/_doc/[ドキュメントID]



----------------------------------------------------------------------------------------------------------------------------------------

< インデックスの操作をハンズオンで学ぶ >

次に、ドキュメントが格納されるインデックスに対しての操作について行っていきます。

----------------------------------------------------------------------------------------------------------------------------------------

< インデックスの取得 >

インデックスの情報を取得するには、/[インデックス名]に対して、GETメソッドでリクエストします

インデックスの取得

    GET /インデックス名

< Requestデータ >

GET /book

GET/book結果は以下のようになります。


< Responseデータ >

{
  "book" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "author" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "itemPrice" : {
          "type" : "long"
        },
        "publisherName" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "salesDate" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "title" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        }
      }
    },
    "settings" : {
      "index" : {
        "creation_date" : "1644559842790",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "9X4ZDNH3Rqi6SaFK6o-mCQ",
        "version" : {
          "created" : "7000099"
        },
        "provided_name" : "book"
      }
    }
  }
}

大きく分けて、インデックスに関するmappingsとsettingsの情報を取得することができます。

1. mappingsはデータベースにおけるテーブル定義のようなもので、後述の章で説明します。

    ・DBにおけるテーブル定義 => key(propertie)の情報 => データを格納するカラムの情報

2. settingsはインデックスの作成日時、シャードの数、レプリカの数などを確認することができます。

    ・インデックスの設定情報(config)のようなもの


----------------------------------------------------------------------------------------------------------------------------------------

< インデックスの削除 >

インデックスを削除するには、「 /インデックス名 」(パス・ルート)対して、DELETEメソッドでリクエストします。

「インデックスの削除」

    DELETE /インデックス名


< Requestデータ >

DELETE /book


DELETE/book結果は以下のようになります。

< Responseデータ >

{
  "acknowledged" : true
}



acknowledgedがtrueとなっていれば、正しくインデックスが削除されています。

試しにインデックスを取得してみて、正しく削除されているか確認してみます。


< Requestデータ >

GET /book


< Responseデータ >

{
  "error" : {
    "root_cause" : [
      {
        "type" : "index_not_found_exception",
        "reason" : "no such index [book]",
        "resource.type" : "index_or_alias",
        "resource.id" : "book",
        "index_uuid" : "_na_",
        "index" : "book"
      }
    ],
    "type" : "index_not_found_exception",
    "reason" : "no such index [book]",
    "resource.type" : "index_or_alias",
    "resource.id" : "book",
    "index_uuid" : "_na_",
    "index" : "book"
  },
  "status" : 404
}



    ・"reason" : "no such index [book]"とエラーが返ってきており、インデックスがすでに削除済みであることが確認できました。

    ・"status" : 404なので、not-foundだということがわかる！



----------------------------------------------------------------------------------------------------------------------------------------

< インデックスの作成 >

1. ドキュメントを作成したときに、インデックスが作成されていなければ、自動でインデックスも作成されます。

2. ドキュメントを作成せずインデックスのみ作成するには、/[インデックス名]に対して、PUTメソッドでリクエストします。

「インデックスの作成」

    PUT /インデックス名


< Requestデータ >

PUT /book


PUT/book結果は以下のようになります。


< Responseデータ >

{
  "acknowledged" : true,
  "shards_acknowledged" : true,
  "index" : "book"
}



< インデックスだけ作成した状態でGETしてみる！！ >

< Requestデータ >

GET /book


< Responseデータ >

{
  "book" : {
    "aliases" : { },
    "mappings" : { },
    "settings" : {
      "index" : {
        "creation_date" : "1644734339098",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "-flREtxRRd2ydr8Y_r5N3g",
        "version" : {
          "created" : "7000099"
        },
        "provided_name" : "book"
      }
    }
  }
}



----------------------------------------------------------------------------------------------------------------------------------------

< マッピングの操作をハンズオンで学ぶ >

1. インデックスには、「マッピング」という概念が存在します。

2. マッピングとは、データベースにおけるテーブル定義に相当し、このマッピングの確認や作成方法についても学びます。


< マッピングの確認 >

1. マッピングとは、データベースにおけるテーブル定義に相当します。

2. インデックスに対して１つのマッピングが存在し、格納されるドキュメントのフィールドタイプなどが定義されます。

    ・「インデックス」(データ索引のタイトル)に格納される「ドキュメント」(実データ)の「データ構造定義」 => 「マッピング」

3. マッピングはドキュメントが作成されたときに自動で作成されますが、マッピングのみ指定して作成することも可能です。

    ・先に構造を定義しておくことも可能！

それではまずは、ドキュメントが作成されたときに自動で作成されるマッピングについて確認します。


先ほどの章ではインデックスのみ作成された状態です。

マッピングを確認するには、/[インデックス名]/_mappingに対して、GETメソッドでリクエストします。


「マッピング(データ構造定義)の確認」

GET /インデックス名/_mapping


< Requestデータ >


GET /book/_mapping

結果は以下のようになります。 


< Responseデータ >

{
  "book" : {
    "mappings" : { }
  }
}


mappingsの内容は空で、何もない状態です。

ここから、ドキュメントを作成してみます。


< Requestデータ >

PUT /book/_doc/1
{
    "title":"ビジネスPython超入門",
    "author":"中島省吾",
    "publisherName":"日経BP",
    "salesDate":"2019年06月07日",
    "itemPrice":2592
}



< Responseデータ >


{
  "_index" : "book",
  "_type" : "_doc",
  "_id" : "1",
  "_version" : 1,
  "result" : "created",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 0,
  "_primary_term" : 1
}



再度マッピングを確認してみます。



< Requestデータ >

GET /book/_mapping


< Responseデータ >

インデックス名 => mappings => properties => 各実データの構造が定義されている！


{
  "book" : {
    "mappings" : {
      "properties" : {
        "author" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "itemPrice" : {
          "type" : "long"
        },
        "publisherName" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "salesDate" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "title" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        }
      }
    }
  }
}

properties内に、実際の各フィールドに対するタイプ情報が格納されています。

例えば、authorフィールドはtextタイプの値が格納されることがわかります。

また、fieldsが定義されています。

これは追加の検索を可能にするために使われます。

標準のtextタイプだけであれば部分一致で検索されますが、この例のようにkeywordと指定されていると、単語検索もできるようになります。

ただし、この場合ignore_aboveで指定されているように256文字以上であれば、単語検索用の対象にはなりません。


----------------------------------------------------------------------------------------------------------------------------------------

< マッピングの作成 >

1. マッピングはドキュメントが作成されたときに自動で作成されますが、インデックス作成時に指定して作成することもできます。

2. マッピングはインデックス作成後は変更できないため、一度先程作成したインデックスを削除します。

    DELETE /book

それではマッピングを指定してインデックスを作成します。

マッピングを指定してインデックスを作成するには、/[インデックス名]に対して、PUTメソッドでリクエストします。


「 マッピング(データ構造)の作成・定義 」

    PUT /インデックス名
    {
        "mappings":{
            "properties":{
                プロパティ名(key名): {
                定義内容のJSONデータ
                }
            }
        }
    }


リクエストBodyに、mappingsと指定してその中に作成したいマッピングの内容を記載します。

マッピングの内容はpropertiesの中に指定します。今回は各フィールドのタイプを指定して作成してみます。



< Requestデータ >


PUT /book
{
    "mappings":{
        "properties":{
            "title":{
                "type":"keyword"
            },
            "author":{
                "type":"keyword"
            },
            "publisherName":{
                "type":"keyword"
            },
            "isbn":{
                "type":"keyword"
            },
            "itemCaption":{
                "type":"text"
            },
            "itemPrice":{
                "type":"long"
            }
        }
    }
}



< Responseデータ >

{
  "acknowledged" : true,
  "shards_acknowledged" : true,
  "index" : "book"
}



再度マッピングを確認してみます。

< Requestデータ >

GET /book/_mapping


結果は以下のようになり、指定したマッピング付きでインデックスが作成されました。

< Responseデータ >

{
  "book" : {
    "mappings" : {
      "properties" : {
        "author" : {
          "type" : "keyword"
        },
        "isbn" : {
          "type" : "keyword"
        },
        "itemCaption" : {
          "type" : "text"
        },
        "itemPrice" : {
          "type" : "long"
        },
        "publisherName" : {
          "type" : "keyword"
        },
        "title" : {
          "type" : "keyword"
        }
      }
    }
  }
}




----------------------------------------------------------------------------------------------------------------------------------------

< その他主要な操作をハンズオンで学ぶ >

その他、これまで紹介した操作以外の主要なドキュメント操作も行います。

具体的には、本章では以下について実践していきます。

    1. 複数のドキュメントを一度に作成
    
    2. ドキュメントに項目を追加


----------------------------------------------------------------------------------------------------------------------------------------

< 複数のドキュメントを一度に作成 >

複数のドキュメントを一気に作成するには、/[インデックス名]/_bulkに対して、POSTメソッドでリクエストします。



リクエストBodyに各ドキュメントの内容を続けて記載することで、まとめてドキュメントを作成することができます。

１つ１つのドキュメントは、以下のフォーマットで記載します。

「 複数のドキュメントを一度に作成する方法 」


    POST /インデックス名/_bulk(かさばる)の後に、{ "index": { "_id": 作成するID } }JSON と {実データ}JSON


    POST /インデックス名/_bulk
    {
        "index":
        {
            "_id":作成するID
        }
    }
    {
        "フィールド名1":"フィールド値1",
        "フィールド名2":"フィールド値2"...
    }


具体的に、今回は以下のようにリクエストして作成してみます。


POST /book/_doc/1
{
  "機体名":"ロボ玉試作1号機",
  "攻撃力":1000,
  "守備力":1000,
  "スピード":1000
}

< Requestデータ >

POST /book/_bulk
{"index":{"_id":2}}
{
  "機体名":"ロボ玉試作2号機",
  "攻撃力":2000,
  "守備力":2000,
  "スピード":2000
}
{"index":{"_id":3}}
{
 "機体名":"ロボ玉試作3号機",
 "攻撃力":3000,
 "守備力":3000,
 "スピード":3000
}

POST /book/_bulk
{"index":{"_id":1}},
{
    "title":"退屈なことはPythonにやらせよう",
    "author":"AlSweigart/相川愛三",
    "publisherName":"オライリー・ジャパン",
    "isbn":"9784873117782",
    "itemCaption":"ファイル名の変更や表計算のデータ更新といった作業は、日々の仕事の中で頻繁に発生します。ひとつふたつ修正するだけであれば問題ないのですが、それが数十、数百となってくると手に負えません。そのような単純な繰り返し作業はコンピュータに肩代わりしてもらうとすごくラクになります。本書では、手作業だと膨大に時間がかかる処理を一瞬でこなすＰｙｔｈｏｎ３プログラムの作り方について学びます。対象読者はノンプログラマー。本書で基本をマスターすれば、プログラミング未経験者でも面倒な単純作業を苦もなくこなす便利なプログラムを作れるようになります。さらに、章末の練習問題を解くことで、類似のタスクを自動処理するスキルをもっと高めることができます。",
    "itemPrice":3996
},
{"index":{"_id":2}},
{
    "title":"ビジネスPython超入門",
    "author":"中島省吾",
    "publisherName":"日経BP",
    "isbn":"9784296102136",
    "itemCaption":"ビジネスに欠かせないプログラミングの基本スキルが学べる！人工知能で注目の言語、Ｐｙｔｈｏｎを初歩から解説。書き方から実行手順ってくると手に負えません。そのような単純な繰り返し作業はコンピュータに肩代わりしてもらうとすごくラクになります。本書では、手作業だと膨大に時間がかかる処理を一瞬でこなすＰｙｔｈｏｎ３プログラムの作り方について学びます。対象読者はノンプログラマー。本書で基本をマスターすれば、プログラミング未経験者でも面倒な単純作業を苦もなくこなす便利なプログラムを作れるようになります。さらに、章末の練習問題を解くことで、類似のタスクを自動処理するスキルをもっと高めることができます。",
    "itemPrice":3996
}



< Responseデータ >










----------------------------------------------------------------------------------------------------------------------------------------

< ドキュメントに項目を追加 >

ドキュメントに項目を追加することも可能です。

ドキュメントへの項目追加には、ドキュメントの更新と同じように/[インデックス名]/_update/[ドキュメントID]に対してPOSTリクエストでリクエストします。

試しに、discountRateというフィールドと0という値を追加してみます。

「ドキュメントに項目を追加」

POST /book/_update/1
{
    "doc":{"Pirot":"ロボ玉"}
}

結果は以下のようになります。


resultがupdatedとなっており、ドキュメントが更新されたことがわかります。

このドキュメントの内容を取得して確認してみます。

GET/book/_doc/1

"discountRate":0となっており、ドキュメントに項目が追加されたことがわかります。





< Requestデータ >


< Responseデータ >



----------------------------------------------------------------------------------------------------------------------------------------

< まとめ ~ マッピング・インデックスおよびその他主要なドキュメント操作 ~ >

ここまでのハンズオンで、マッピング・インデックスおよびその他主要なドキュメント操作について学ぶことができました。

あらためて以下、まとめておきます。

    操作                            HTTPメソッド                    URL

インデックスの取得                      GET                     /[インデックス名]

インデックスの削除                      DELETE                  /[インデックス名]

インデックスを作成                      PUT                     /[インデックス名]

マッピングを指定してインデックスを作成      PUT                     /[インデックス名]
(リクエストBodyにmappingを指定)

マッピングを取得                         GET                     /[インデックス名]/_mapping

複数のドキュメントを一度に作成              POST                   /[インデックス名]/_bulk

ドキュメントに項目を追加                   POST                    /[インデックス名]/_update/[ドキュメントID]


----------------------------------------------------------------------------------------------------------------------------------------

< Elasticsearchによる様々な検索方法をハンズオンで学ぶ >

ここまでで、Elasticsearchに必要とされることが多い一通りの操作について実践してきました。

それでは最後に、Elasticsearchのメインの機能である検索について行っていきます。

今回は、以下の検索について実行してみます。

    1. すべてのドキュメントを検索

    2. 指定した単語を含むドキュメントを検索

    3. and条件でドキュメントを検索

    4. not検索

    5. or検索

    6. 特定のワードを重み付けして検索

    7. ハイライト検索

    8. 絞り込み検索

    9. 検索結果をソート


----------------------------------------------------------------------------------------------------------------------------------------

< すべてのドキュメントを検索 >

すべてのドキュメントを検索するには、/[インデックス名]/_searchに対してGETメソッドでリクエストします。

GET/book/_search結果は以下のようになります。


< Requestデータ >

GET/book/_search

< Responseデータ >

{
  "took" : 210,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "book",
        "_type" : "_doc",
        "_id" : "1",
        "_score" : 1.0,
        "_source" : {
          "機体名" : "ロボ玉試作1号機",
          "攻撃力" : 1000,
          "守備力" : 1000,
          "スピード" : 1000,
          "Pirot" : "ロボ玉"
        }
      }
    ]
  }
}

hitsの中に、今回の検索結果が格納されています。totalの中のvalueが、ヒットした件数になります。

今回は5件がヒットしたことになります。さらに同じhitsという項目があり、この中に具体的にヒットしたドキュメントの内容が返されます。

デフォルトでは最大10件しか返さないため、/[インデックス名]/_search?size=20のようにsizeパラメータで検索件数を指定することもできます。




----------------------------------------------------------------------------------------------------------------------------------------

< 指定した単語を含むドキュメントを検索 >

ある単語を含むドキュメントを検索するには、リクエストbodyに以下のフォーマットで記載します。

{"query":{"match":{"[フィールド名]":"[値]"}}}itemCaptionにプログラミングを含むドキュメントを検索してみます。



< Requestデータ >

< Responseデータ >


----------------------------------------------------------------------------------------------------------------------------------------

< and条件でドキュメントを検索 >



< Requestデータ >

< Responseデータ >
----------------------------------------------------------------------------------------------------------------------------------------

< not検索 >


----------------------------------------------------------------------------------------------------------------------------------------

< or検索 >





----------------------------------------------------------------------------------------------------------------------------------------

< ハイライト検索 >



----------------------------------------------------------------------------------------------------------------------------------------

< 絞り込み検索 >


----------------------------------------------------------------------------------------------------------------------------------------

< 検索結果をソート >


----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------


